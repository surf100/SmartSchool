// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/attendance.proto

package attendancepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AttendanceService_PushEvent_FullMethodName         = "/attendancepb.AttendanceService/PushEvent"
	AttendanceService_GetAttendanceLogs_FullMethodName = "/attendancepb.AttendanceService/GetAttendanceLogs"
)

// AttendanceServiceClient is the client API for AttendanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttendanceServiceClient interface {
	PushEvent(ctx context.Context, in *PushEventRequest, opts ...grpc.CallOption) (*PushEventResponse, error)
	GetAttendanceLogs(ctx context.Context, in *GetAttendanceLogsRequest, opts ...grpc.CallOption) (*GetAttendanceLogsResponse, error)
}

type attendanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAttendanceServiceClient(cc grpc.ClientConnInterface) AttendanceServiceClient {
	return &attendanceServiceClient{cc}
}

func (c *attendanceServiceClient) PushEvent(ctx context.Context, in *PushEventRequest, opts ...grpc.CallOption) (*PushEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushEventResponse)
	err := c.cc.Invoke(ctx, AttendanceService_PushEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendanceServiceClient) GetAttendanceLogs(ctx context.Context, in *GetAttendanceLogsRequest, opts ...grpc.CallOption) (*GetAttendanceLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAttendanceLogsResponse)
	err := c.cc.Invoke(ctx, AttendanceService_GetAttendanceLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttendanceServiceServer is the server API for AttendanceService service.
// All implementations must embed UnimplementedAttendanceServiceServer
// for forward compatibility.
type AttendanceServiceServer interface {
	PushEvent(context.Context, *PushEventRequest) (*PushEventResponse, error)
	GetAttendanceLogs(context.Context, *GetAttendanceLogsRequest) (*GetAttendanceLogsResponse, error)
	mustEmbedUnimplementedAttendanceServiceServer()
}

// UnimplementedAttendanceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAttendanceServiceServer struct{}

func (UnimplementedAttendanceServiceServer) PushEvent(context.Context, *PushEventRequest) (*PushEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushEvent not implemented")
}
func (UnimplementedAttendanceServiceServer) GetAttendanceLogs(context.Context, *GetAttendanceLogsRequest) (*GetAttendanceLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttendanceLogs not implemented")
}
func (UnimplementedAttendanceServiceServer) mustEmbedUnimplementedAttendanceServiceServer() {}
func (UnimplementedAttendanceServiceServer) testEmbeddedByValue()                           {}

// UnsafeAttendanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttendanceServiceServer will
// result in compilation errors.
type UnsafeAttendanceServiceServer interface {
	mustEmbedUnimplementedAttendanceServiceServer()
}

func RegisterAttendanceServiceServer(s grpc.ServiceRegistrar, srv AttendanceServiceServer) {
	// If the following call pancis, it indicates UnimplementedAttendanceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AttendanceService_ServiceDesc, srv)
}

func _AttendanceService_PushEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceServiceServer).PushEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttendanceService_PushEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceServiceServer).PushEvent(ctx, req.(*PushEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttendanceService_GetAttendanceLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttendanceLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceServiceServer).GetAttendanceLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttendanceService_GetAttendanceLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceServiceServer).GetAttendanceLogs(ctx, req.(*GetAttendanceLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AttendanceService_ServiceDesc is the grpc.ServiceDesc for AttendanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AttendanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "attendancepb.AttendanceService",
	HandlerType: (*AttendanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushEvent",
			Handler:    _AttendanceService_PushEvent_Handler,
		},
		{
			MethodName: "GetAttendanceLogs",
			Handler:    _AttendanceService_GetAttendanceLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/attendance.proto",
}
