// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/person.proto

package personpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PersonService_CreatePerson_FullMethodName           = "/personpb.PersonService/CreatePerson"
	PersonService_GetPerson_FullMethodName              = "/personpb.PersonService/GetPerson"
	PersonService_ListPersons_FullMethodName            = "/personpb.PersonService/ListPersons"
	PersonService_UpdatePerson_FullMethodName           = "/personpb.PersonService/UpdatePerson"
	PersonService_DeletePerson_FullMethodName           = "/personpb.PersonService/DeletePerson"
	PersonService_GetPersonParents_FullMethodName       = "/personpb.PersonService/GetPersonParents"
	PersonService_GetChildrenByParentID_FullMethodName  = "/personpb.PersonService/GetChildrenByParentID"
	PersonService_GetPersonTransactions_FullMethodName  = "/personpb.PersonService/GetPersonTransactions"
	PersonService_SearchPersons_FullMethodName          = "/personpb.PersonService/SearchPersons"
	PersonService_GetPersonsByDepartment_FullMethodName = "/personpb.PersonService/GetPersonsByDepartment"
)

// PersonServiceClient is the client API for PersonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonServiceClient interface {
	CreatePerson(ctx context.Context, in *CreatePersonRequest, opts ...grpc.CallOption) (*Person, error)
	GetPerson(ctx context.Context, in *GetPersonRequest, opts ...grpc.CallOption) (*Person, error)
	ListPersons(ctx context.Context, in *ListPersonsRequest, opts ...grpc.CallOption) (*ListPersonsResponse, error)
	UpdatePerson(ctx context.Context, in *UpdatePersonRequest, opts ...grpc.CallOption) (*Person, error)
	DeletePerson(ctx context.Context, in *DeletePersonRequest, opts ...grpc.CallOption) (*DeletePersonResponse, error)
	// Специальные запросы
	GetPersonParents(ctx context.Context, in *GetPersonParentsRequest, opts ...grpc.CallOption) (*GetPersonParentsResponse, error)
	GetChildrenByParentID(ctx context.Context, in *GetChildrenByParentIDRequest, opts ...grpc.CallOption) (*GetChildrenByParentIDResponse, error)
	GetPersonTransactions(ctx context.Context, in *GetPersonTransactionsRequest, opts ...grpc.CallOption) (*GetPersonTransactionsResponse, error)
	// Поиск и фильтрация
	SearchPersons(ctx context.Context, in *SearchPersonsRequest, opts ...grpc.CallOption) (*SearchPersonsResponse, error)
	GetPersonsByDepartment(ctx context.Context, in *GetPersonsByDepartmentRequest, opts ...grpc.CallOption) (*ListPersonsResponse, error)
}

type personServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonServiceClient(cc grpc.ClientConnInterface) PersonServiceClient {
	return &personServiceClient{cc}
}

func (c *personServiceClient) CreatePerson(ctx context.Context, in *CreatePersonRequest, opts ...grpc.CallOption) (*Person, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Person)
	err := c.cc.Invoke(ctx, PersonService_CreatePerson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) GetPerson(ctx context.Context, in *GetPersonRequest, opts ...grpc.CallOption) (*Person, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Person)
	err := c.cc.Invoke(ctx, PersonService_GetPerson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) ListPersons(ctx context.Context, in *ListPersonsRequest, opts ...grpc.CallOption) (*ListPersonsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPersonsResponse)
	err := c.cc.Invoke(ctx, PersonService_ListPersons_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) UpdatePerson(ctx context.Context, in *UpdatePersonRequest, opts ...grpc.CallOption) (*Person, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Person)
	err := c.cc.Invoke(ctx, PersonService_UpdatePerson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) DeletePerson(ctx context.Context, in *DeletePersonRequest, opts ...grpc.CallOption) (*DeletePersonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePersonResponse)
	err := c.cc.Invoke(ctx, PersonService_DeletePerson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) GetPersonParents(ctx context.Context, in *GetPersonParentsRequest, opts ...grpc.CallOption) (*GetPersonParentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPersonParentsResponse)
	err := c.cc.Invoke(ctx, PersonService_GetPersonParents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) GetChildrenByParentID(ctx context.Context, in *GetChildrenByParentIDRequest, opts ...grpc.CallOption) (*GetChildrenByParentIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChildrenByParentIDResponse)
	err := c.cc.Invoke(ctx, PersonService_GetChildrenByParentID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) GetPersonTransactions(ctx context.Context, in *GetPersonTransactionsRequest, opts ...grpc.CallOption) (*GetPersonTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPersonTransactionsResponse)
	err := c.cc.Invoke(ctx, PersonService_GetPersonTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) SearchPersons(ctx context.Context, in *SearchPersonsRequest, opts ...grpc.CallOption) (*SearchPersonsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchPersonsResponse)
	err := c.cc.Invoke(ctx, PersonService_SearchPersons_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) GetPersonsByDepartment(ctx context.Context, in *GetPersonsByDepartmentRequest, opts ...grpc.CallOption) (*ListPersonsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPersonsResponse)
	err := c.cc.Invoke(ctx, PersonService_GetPersonsByDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonServiceServer is the server API for PersonService service.
// All implementations must embed UnimplementedPersonServiceServer
// for forward compatibility.
type PersonServiceServer interface {
	CreatePerson(context.Context, *CreatePersonRequest) (*Person, error)
	GetPerson(context.Context, *GetPersonRequest) (*Person, error)
	ListPersons(context.Context, *ListPersonsRequest) (*ListPersonsResponse, error)
	UpdatePerson(context.Context, *UpdatePersonRequest) (*Person, error)
	DeletePerson(context.Context, *DeletePersonRequest) (*DeletePersonResponse, error)
	// Специальные запросы
	GetPersonParents(context.Context, *GetPersonParentsRequest) (*GetPersonParentsResponse, error)
	GetChildrenByParentID(context.Context, *GetChildrenByParentIDRequest) (*GetChildrenByParentIDResponse, error)
	GetPersonTransactions(context.Context, *GetPersonTransactionsRequest) (*GetPersonTransactionsResponse, error)
	// Поиск и фильтрация
	SearchPersons(context.Context, *SearchPersonsRequest) (*SearchPersonsResponse, error)
	GetPersonsByDepartment(context.Context, *GetPersonsByDepartmentRequest) (*ListPersonsResponse, error)
	mustEmbedUnimplementedPersonServiceServer()
}

// UnimplementedPersonServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPersonServiceServer struct{}

func (UnimplementedPersonServiceServer) CreatePerson(context.Context, *CreatePersonRequest) (*Person, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePerson not implemented")
}
func (UnimplementedPersonServiceServer) GetPerson(context.Context, *GetPersonRequest) (*Person, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerson not implemented")
}
func (UnimplementedPersonServiceServer) ListPersons(context.Context, *ListPersonsRequest) (*ListPersonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPersons not implemented")
}
func (UnimplementedPersonServiceServer) UpdatePerson(context.Context, *UpdatePersonRequest) (*Person, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePerson not implemented")
}
func (UnimplementedPersonServiceServer) DeletePerson(context.Context, *DeletePersonRequest) (*DeletePersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePerson not implemented")
}
func (UnimplementedPersonServiceServer) GetPersonParents(context.Context, *GetPersonParentsRequest) (*GetPersonParentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonParents not implemented")
}
func (UnimplementedPersonServiceServer) GetChildrenByParentID(context.Context, *GetChildrenByParentIDRequest) (*GetChildrenByParentIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChildrenByParentID not implemented")
}
func (UnimplementedPersonServiceServer) GetPersonTransactions(context.Context, *GetPersonTransactionsRequest) (*GetPersonTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonTransactions not implemented")
}
func (UnimplementedPersonServiceServer) SearchPersons(context.Context, *SearchPersonsRequest) (*SearchPersonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPersons not implemented")
}
func (UnimplementedPersonServiceServer) GetPersonsByDepartment(context.Context, *GetPersonsByDepartmentRequest) (*ListPersonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonsByDepartment not implemented")
}
func (UnimplementedPersonServiceServer) mustEmbedUnimplementedPersonServiceServer() {}
func (UnimplementedPersonServiceServer) testEmbeddedByValue()                       {}

// UnsafePersonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonServiceServer will
// result in compilation errors.
type UnsafePersonServiceServer interface {
	mustEmbedUnimplementedPersonServiceServer()
}

func RegisterPersonServiceServer(s grpc.ServiceRegistrar, srv PersonServiceServer) {
	// If the following call pancis, it indicates UnimplementedPersonServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PersonService_ServiceDesc, srv)
}

func _PersonService_CreatePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).CreatePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_CreatePerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).CreatePerson(ctx, req.(*CreatePersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_GetPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).GetPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_GetPerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).GetPerson(ctx, req.(*GetPersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_ListPersons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPersonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).ListPersons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_ListPersons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).ListPersons(ctx, req.(*ListPersonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_UpdatePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).UpdatePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_UpdatePerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).UpdatePerson(ctx, req.(*UpdatePersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_DeletePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).DeletePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_DeletePerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).DeletePerson(ctx, req.(*DeletePersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_GetPersonParents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonParentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).GetPersonParents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_GetPersonParents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).GetPersonParents(ctx, req.(*GetPersonParentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_GetChildrenByParentID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChildrenByParentIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).GetChildrenByParentID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_GetChildrenByParentID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).GetChildrenByParentID(ctx, req.(*GetChildrenByParentIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_GetPersonTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).GetPersonTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_GetPersonTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).GetPersonTransactions(ctx, req.(*GetPersonTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_SearchPersons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPersonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).SearchPersons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_SearchPersons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).SearchPersons(ctx, req.(*SearchPersonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_GetPersonsByDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonsByDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).GetPersonsByDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonService_GetPersonsByDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).GetPersonsByDepartment(ctx, req.(*GetPersonsByDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PersonService_ServiceDesc is the grpc.ServiceDesc for PersonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "personpb.PersonService",
	HandlerType: (*PersonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePerson",
			Handler:    _PersonService_CreatePerson_Handler,
		},
		{
			MethodName: "GetPerson",
			Handler:    _PersonService_GetPerson_Handler,
		},
		{
			MethodName: "ListPersons",
			Handler:    _PersonService_ListPersons_Handler,
		},
		{
			MethodName: "UpdatePerson",
			Handler:    _PersonService_UpdatePerson_Handler,
		},
		{
			MethodName: "DeletePerson",
			Handler:    _PersonService_DeletePerson_Handler,
		},
		{
			MethodName: "GetPersonParents",
			Handler:    _PersonService_GetPersonParents_Handler,
		},
		{
			MethodName: "GetChildrenByParentID",
			Handler:    _PersonService_GetChildrenByParentID_Handler,
		},
		{
			MethodName: "GetPersonTransactions",
			Handler:    _PersonService_GetPersonTransactions_Handler,
		},
		{
			MethodName: "SearchPersons",
			Handler:    _PersonService_SearchPersons_Handler,
		},
		{
			MethodName: "GetPersonsByDepartment",
			Handler:    _PersonService_GetPersonsByDepartment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/person.proto",
}
