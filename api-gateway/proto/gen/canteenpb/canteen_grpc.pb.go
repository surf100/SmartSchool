// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/canteen.proto

package canteenpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MealService_RecordMeal_FullMethodName     = "/canteenpb.MealService/RecordMeal"
	MealService_GetMeal_FullMethodName        = "/canteenpb.MealService/GetMeal"
	MealService_ListMeals_FullMethodName      = "/canteenpb.MealService/ListMeals"
	MealService_GetMealHistory_FullMethodName = "/canteenpb.MealService/GetMealHistory"
)

// MealServiceClient is the client API for MealService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Meal Service for recording meals
type MealServiceClient interface {
	RecordMeal(ctx context.Context, in *RecordMealRequest, opts ...grpc.CallOption) (*Meal, error)
	GetMeal(ctx context.Context, in *MealIDRequest, opts ...grpc.CallOption) (*Meal, error)
	ListMeals(ctx context.Context, in *ListMealsRequest, opts ...grpc.CallOption) (*MealList, error)
	GetMealHistory(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*MealList, error)
}

type mealServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMealServiceClient(cc grpc.ClientConnInterface) MealServiceClient {
	return &mealServiceClient{cc}
}

func (c *mealServiceClient) RecordMeal(ctx context.Context, in *RecordMealRequest, opts ...grpc.CallOption) (*Meal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Meal)
	err := c.cc.Invoke(ctx, MealService_RecordMeal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealServiceClient) GetMeal(ctx context.Context, in *MealIDRequest, opts ...grpc.CallOption) (*Meal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Meal)
	err := c.cc.Invoke(ctx, MealService_GetMeal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealServiceClient) ListMeals(ctx context.Context, in *ListMealsRequest, opts ...grpc.CallOption) (*MealList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MealList)
	err := c.cc.Invoke(ctx, MealService_ListMeals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealServiceClient) GetMealHistory(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*MealList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MealList)
	err := c.cc.Invoke(ctx, MealService_GetMealHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MealServiceServer is the server API for MealService service.
// All implementations must embed UnimplementedMealServiceServer
// for forward compatibility.
//
// Meal Service for recording meals
type MealServiceServer interface {
	RecordMeal(context.Context, *RecordMealRequest) (*Meal, error)
	GetMeal(context.Context, *MealIDRequest) (*Meal, error)
	ListMeals(context.Context, *ListMealsRequest) (*MealList, error)
	GetMealHistory(context.Context, *UserIDRequest) (*MealList, error)
	mustEmbedUnimplementedMealServiceServer()
}

// UnimplementedMealServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMealServiceServer struct{}

func (UnimplementedMealServiceServer) RecordMeal(context.Context, *RecordMealRequest) (*Meal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordMeal not implemented")
}
func (UnimplementedMealServiceServer) GetMeal(context.Context, *MealIDRequest) (*Meal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeal not implemented")
}
func (UnimplementedMealServiceServer) ListMeals(context.Context, *ListMealsRequest) (*MealList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMeals not implemented")
}
func (UnimplementedMealServiceServer) GetMealHistory(context.Context, *UserIDRequest) (*MealList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMealHistory not implemented")
}
func (UnimplementedMealServiceServer) mustEmbedUnimplementedMealServiceServer() {}
func (UnimplementedMealServiceServer) testEmbeddedByValue()                     {}

// UnsafeMealServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MealServiceServer will
// result in compilation errors.
type UnsafeMealServiceServer interface {
	mustEmbedUnimplementedMealServiceServer()
}

func RegisterMealServiceServer(s grpc.ServiceRegistrar, srv MealServiceServer) {
	// If the following call pancis, it indicates UnimplementedMealServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MealService_ServiceDesc, srv)
}

func _MealService_RecordMeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordMealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealServiceServer).RecordMeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealService_RecordMeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealServiceServer).RecordMeal(ctx, req.(*RecordMealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealService_GetMeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MealIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealServiceServer).GetMeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealService_GetMeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealServiceServer).GetMeal(ctx, req.(*MealIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealService_ListMeals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMealsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealServiceServer).ListMeals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealService_ListMeals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealServiceServer).ListMeals(ctx, req.(*ListMealsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealService_GetMealHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealServiceServer).GetMealHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealService_GetMealHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealServiceServer).GetMealHistory(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MealService_ServiceDesc is the grpc.ServiceDesc for MealService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MealService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "canteenpb.MealService",
	HandlerType: (*MealServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecordMeal",
			Handler:    _MealService_RecordMeal_Handler,
		},
		{
			MethodName: "GetMeal",
			Handler:    _MealService_GetMeal_Handler,
		},
		{
			MethodName: "ListMeals",
			Handler:    _MealService_ListMeals_Handler,
		},
		{
			MethodName: "GetMealHistory",
			Handler:    _MealService_GetMealHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/canteen.proto",
}

const (
	PaymentService_ProcessPayment_FullMethodName    = "/canteenpb.PaymentService/ProcessPayment"
	PaymentService_GetPayment_FullMethodName        = "/canteenpb.PaymentService/GetPayment"
	PaymentService_ListPayments_FullMethodName      = "/canteenpb.PaymentService/ListPayments"
	PaymentService_GetPaymentHistory_FullMethodName = "/canteenpb.PaymentService/GetPaymentHistory"
)

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Payment Service for transactions
type PaymentServiceClient interface {
	ProcessPayment(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*Payment, error)
	GetPayment(ctx context.Context, in *PaymentIDRequest, opts ...grpc.CallOption) (*Payment, error)
	ListPayments(ctx context.Context, in *ListPaymentsRequest, opts ...grpc.CallOption) (*PaymentList, error)
	GetPaymentHistory(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*PaymentList, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) ProcessPayment(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*Payment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payment)
	err := c.cc.Invoke(ctx, PaymentService_ProcessPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetPayment(ctx context.Context, in *PaymentIDRequest, opts ...grpc.CallOption) (*Payment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payment)
	err := c.cc.Invoke(ctx, PaymentService_GetPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) ListPayments(ctx context.Context, in *ListPaymentsRequest, opts ...grpc.CallOption) (*PaymentList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentList)
	err := c.cc.Invoke(ctx, PaymentService_ListPayments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetPaymentHistory(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*PaymentList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentList)
	err := c.cc.Invoke(ctx, PaymentService_GetPaymentHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations must embed UnimplementedPaymentServiceServer
// for forward compatibility.
//
// Payment Service for transactions
type PaymentServiceServer interface {
	ProcessPayment(context.Context, *PaymentRequest) (*Payment, error)
	GetPayment(context.Context, *PaymentIDRequest) (*Payment, error)
	ListPayments(context.Context, *ListPaymentsRequest) (*PaymentList, error)
	GetPaymentHistory(context.Context, *UserIDRequest) (*PaymentList, error)
	mustEmbedUnimplementedPaymentServiceServer()
}

// UnimplementedPaymentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentServiceServer struct{}

func (UnimplementedPaymentServiceServer) ProcessPayment(context.Context, *PaymentRequest) (*Payment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessPayment not implemented")
}
func (UnimplementedPaymentServiceServer) GetPayment(context.Context, *PaymentIDRequest) (*Payment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayment not implemented")
}
func (UnimplementedPaymentServiceServer) ListPayments(context.Context, *ListPaymentsRequest) (*PaymentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPayments not implemented")
}
func (UnimplementedPaymentServiceServer) GetPaymentHistory(context.Context, *UserIDRequest) (*PaymentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentHistory not implemented")
}
func (UnimplementedPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {}
func (UnimplementedPaymentServiceServer) testEmbeddedByValue()                        {}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	// If the following call pancis, it indicates UnimplementedPaymentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_ProcessPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).ProcessPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_ProcessPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).ProcessPayment(ctx, req.(*PaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetPayment(ctx, req.(*PaymentIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_ListPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).ListPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_ListPayments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).ListPayments(ctx, req.(*ListPaymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetPaymentHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetPaymentHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetPaymentHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetPaymentHistory(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentService_ServiceDesc is the grpc.ServiceDesc for PaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "canteenpb.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessPayment",
			Handler:    _PaymentService_ProcessPayment_Handler,
		},
		{
			MethodName: "GetPayment",
			Handler:    _PaymentService_GetPayment_Handler,
		},
		{
			MethodName: "ListPayments",
			Handler:    _PaymentService_ListPayments_Handler,
		},
		{
			MethodName: "GetPaymentHistory",
			Handler:    _PaymentService_GetPaymentHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/canteen.proto",
}
