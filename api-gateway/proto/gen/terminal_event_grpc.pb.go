// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: terminal_event.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TerminalEventService_HandleTerminalEvent_FullMethodName = "/socialwallet.TerminalEventService/HandleTerminalEvent"
)

// TerminalEventServiceClient is the client API for TerminalEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TerminalEventServiceClient interface {
	HandleTerminalEvent(ctx context.Context, in *TerminalEventRequest, opts ...grpc.CallOption) (*TerminalEventResponse, error)
}

type terminalEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTerminalEventServiceClient(cc grpc.ClientConnInterface) TerminalEventServiceClient {
	return &terminalEventServiceClient{cc}
}

func (c *terminalEventServiceClient) HandleTerminalEvent(ctx context.Context, in *TerminalEventRequest, opts ...grpc.CallOption) (*TerminalEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TerminalEventResponse)
	err := c.cc.Invoke(ctx, TerminalEventService_HandleTerminalEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TerminalEventServiceServer is the server API for TerminalEventService service.
// All implementations must embed UnimplementedTerminalEventServiceServer
// for forward compatibility.
type TerminalEventServiceServer interface {
	HandleTerminalEvent(context.Context, *TerminalEventRequest) (*TerminalEventResponse, error)
	mustEmbedUnimplementedTerminalEventServiceServer()
}

// UnimplementedTerminalEventServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTerminalEventServiceServer struct{}

func (UnimplementedTerminalEventServiceServer) HandleTerminalEvent(context.Context, *TerminalEventRequest) (*TerminalEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleTerminalEvent not implemented")
}
func (UnimplementedTerminalEventServiceServer) mustEmbedUnimplementedTerminalEventServiceServer() {}
func (UnimplementedTerminalEventServiceServer) testEmbeddedByValue()                              {}

// UnsafeTerminalEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TerminalEventServiceServer will
// result in compilation errors.
type UnsafeTerminalEventServiceServer interface {
	mustEmbedUnimplementedTerminalEventServiceServer()
}

func RegisterTerminalEventServiceServer(s grpc.ServiceRegistrar, srv TerminalEventServiceServer) {
	// If the following call pancis, it indicates UnimplementedTerminalEventServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TerminalEventService_ServiceDesc, srv)
}

func _TerminalEventService_HandleTerminalEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminalEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalEventServiceServer).HandleTerminalEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminalEventService_HandleTerminalEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalEventServiceServer).HandleTerminalEvent(ctx, req.(*TerminalEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TerminalEventService_ServiceDesc is the grpc.ServiceDesc for TerminalEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TerminalEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "socialwallet.TerminalEventService",
	HandlerType: (*TerminalEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleTerminalEvent",
			Handler:    _TerminalEventService_HandleTerminalEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "terminal_event.proto",
}

const (
	SocialWalletService_HandleTransaction_FullMethodName = "/socialwallet.SocialWalletService/HandleTransaction"
)

// SocialWalletServiceClient is the client API for SocialWalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocialWalletServiceClient interface {
	HandleTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
}

type socialWalletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSocialWalletServiceClient(cc grpc.ClientConnInterface) SocialWalletServiceClient {
	return &socialWalletServiceClient{cc}
}

func (c *socialWalletServiceClient) HandleTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, SocialWalletService_HandleTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocialWalletServiceServer is the server API for SocialWalletService service.
// All implementations must embed UnimplementedSocialWalletServiceServer
// for forward compatibility.
type SocialWalletServiceServer interface {
	HandleTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error)
	mustEmbedUnimplementedSocialWalletServiceServer()
}

// UnimplementedSocialWalletServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSocialWalletServiceServer struct{}

func (UnimplementedSocialWalletServiceServer) HandleTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleTransaction not implemented")
}
func (UnimplementedSocialWalletServiceServer) mustEmbedUnimplementedSocialWalletServiceServer() {}
func (UnimplementedSocialWalletServiceServer) testEmbeddedByValue()                             {}

// UnsafeSocialWalletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocialWalletServiceServer will
// result in compilation errors.
type UnsafeSocialWalletServiceServer interface {
	mustEmbedUnimplementedSocialWalletServiceServer()
}

func RegisterSocialWalletServiceServer(s grpc.ServiceRegistrar, srv SocialWalletServiceServer) {
	// If the following call pancis, it indicates UnimplementedSocialWalletServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SocialWalletService_ServiceDesc, srv)
}

func _SocialWalletService_HandleTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialWalletServiceServer).HandleTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialWalletService_HandleTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialWalletServiceServer).HandleTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SocialWalletService_ServiceDesc is the grpc.ServiceDesc for SocialWalletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SocialWalletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "socialwallet.SocialWalletService",
	HandlerType: (*SocialWalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleTransaction",
			Handler:    _SocialWalletService_HandleTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "terminal_event.proto",
}
